name: 🚀 Blog Deployment & Crossposting

on:
  # Schedule: Monday, Wednesday, Friday at 9 AM UTC
  schedule:
    - cron: '0 9 * * 1,3,5'
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      deploy_type:
        description: 'Deployment type'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - blog-only
          - crosspost-only
  
  # Trigger on push to main branch
  push:
    branches: [ main ]
    paths:
      - 'en/posts/**'
      - 'it/posts/**'
      - 'de/posts/**'
      - 'deploy-schedule.js'
      - 'crosspost-automation.js'

jobs:
  deploy-blog:
    runs-on: ubuntu-latest
    
    # Add permissions for GitHub Actions
    permissions:
      contents: write
      pages: write
      id-token: write
      actions: read
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: 📦 Install dependencies
      run: |
        npm ci
        npm install --save-dev @types/node
    
    - name: 🕒 Set timezone
      run: |
        sudo timedatectl set-timezone Europe/Rome
        echo "Current time: $(date)"
    
    - name: 🚀 Deploy blog posts
      run: |
        echo "🚀 Starting blog deployment..."
        echo "✅ Blog deployment completed (static files ready)"
    
    - name: 🌐 Schedule crossposting
      if: github.event.inputs.deploy_type != 'blog-only'
      run: |
        echo "🌐 Scheduling crossposting..."
        npm run crosspost:schedule
        echo "✅ Crossposting scheduled"
      env:
        # Social Media API Keys (stored in GitHub Secrets)
        TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
        TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
        TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
        TWITTER_ACCESS_SECRET: ${{ secrets.TWITTER_ACCESS_SECRET }}
        LINKEDIN_CLIENT_ID: ${{ secrets.LINKEDIN_CLIENT_ID }}
        LINKEDIN_CLIENT_SECRET: ${{ secrets.LINKEDIN_CLIENT_SECRET }}
        LINKEDIN_ACCESS_TOKEN: ${{ secrets.LINKEDIN_ACCESS_TOKEN }}
        MEDIUM_INTEGRATION_TOKEN: ${{ secrets.MEDIUM_INTEGRATION_TOKEN }}
        REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
        REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
        REDDIT_USERNAME: ${{ secrets.REDDIT_USERNAME }}
        REDDIT_PASSWORD: ${{ secrets.REDDIT_PASSWORD }}
        DEVTO_API_KEY: ${{ secrets.DEVTO_API_KEY }}

    - name: 📊 Monitor crosspost performance (collect)
      run: |
        node crosspost-monitor.js collect || true

    - name: 📋 Generate performance report
      run: |
        node crosspost-monitor.js report || true
    
    - name: 📊 Generate deployment report
      run: |
        echo "📊 Generating deployment report..."
        npm run analytics > deployment-report.txt || echo "No analytics available yet"
        npm run stats >> deployment-report.txt
        echo "📋 Deployment completed at $(date)" >> deployment-report.txt
        cat deployment-report.txt
    
    - name: 📈 Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-logs-${{ github.run_number }}
        path: |
          deployment-log.json
          crosspost-queue.json
          integrated-report.json
          deployment-report.txt
        retention-days: 30
    
    - name: 🎯 Execute immediate crossposts (Twitter, LinkedIn)
      if: github.event.inputs.deploy_type != 'blog-only'
      run: |
        echo "🎯 Executing immediate crossposts..."
        # Wait 2 minutes to allow for proper scheduling
        sleep 120
        
        # Execute immediate platforms
        node -e "
        const fs = require('fs');
        const CrosspostManager = require('./crosspost-automation.js');
        
        async function executeImmediate() {
          if (!fs.existsSync('crosspost-queue.json')) return;
          
          const manager = new CrosspostManager();
          const queueData = JSON.parse(fs.readFileSync('crosspost-queue.json', 'utf8'));
          const now = new Date();
          
          const immediateJobs = queueData.queue.filter(job => {
            const scheduledTime = new Date(job.scheduledTime);
            const delay = scheduledTime.getTime() - now.getTime();
            return ['twitter', 'linkedin'].includes(job.platform) && 
                   job.status === 'scheduled' &&
                   delay <= 60 * 60 * 1000; // Within 1 hour
          });
          
          console.log(\`🚀 Executing \${immediateJobs.length} immediate crossposts\`);
          
          for (const job of immediateJobs) {
            try {
              await manager.executeCrosspost(job);
              console.log(\`✅ Posted to \${job.platform}: \${job.contentAnalysis.title}\`);
            } catch (error) {
              console.log(\`❌ Failed \${job.platform}: \${error.message}\`);
            }
          }
          
          fs.writeFileSync('crosspost-queue.json', JSON.stringify(queueData, null, 2));
          console.log('📱 Immediate crossposting completed');
        }
        
        executeImmediate().catch(console.error);
        "
    
    - name: 📧 Send notification
      if: always()
      run: |
        echo "📧 Deployment notification would be sent here"
        echo "Status: ${{ job.status }}"
        echo "Blog posts deployed: $(cat deployment-log.json | jq -r '.[-1].totalPosts // 0' 2>/dev/null || echo '0')"
        echo "Crossposts scheduled: $(cat crosspost-queue.json | jq -r '.totalCrossposts // 0' 2>/dev/null || echo '0')"

  # Delayed crossposting job (runs 2-6 hours after main deployment)
  delayed-crossposting:
    needs: deploy-blog
    runs-on: ubuntu-latest
    # Run 2 hours after the main job
    if: github.event.inputs.deploy_type != 'blog-only'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: 📦 Install dependencies
      run: npm ci
    
    - name: ⏳ Wait for delayed posting time
      run: |
        echo "⏳ Waiting for delayed crossposting window..."
        # In production, you'd schedule this as a separate workflow
        sleep 60  # Short delay for demo
    
    - name: 🌐 Execute delayed crossposts
      run: |
        echo "🌐 Executing delayed crossposts (Medium, Reddit, Dev.to)..."
        
        node -e "
        const fs = require('fs');
        const CrosspostManager = require('./crosspost-automation.js');
        
        async function executeDelayed() {
          if (!fs.existsSync('crosspost-queue.json')) {
            console.log('No crosspost queue found');
            return;
          }
          
          const manager = new CrosspostManager();
          const queueData = JSON.parse(fs.readFileSync('crosspost-queue.json', 'utf8'));
          const now = new Date();
          
          const delayedJobs = queueData.queue.filter(job => {
            const scheduledTime = new Date(job.scheduledTime);
            const timeDiff = Math.abs(now.getTime() - scheduledTime.getTime());
            return ['medium', 'reddit', 'devto', 'hackernews'].includes(job.platform) &&
                   job.status === 'scheduled' &&
                   timeDiff <= 30 * 60 * 1000; // Within 30 minutes of scheduled time
          });
          
          console.log(\`🚀 Executing \${delayedJobs.length} delayed crossposts\`);
          
          for (const job of delayedJobs) {
            try {
              await manager.executeCrosspost(job);
              console.log(\`✅ Posted to \${job.platform}: \${job.contentAnalysis.title}\`);
              
              // Delay between posts to avoid rate limits
              await new Promise(resolve => setTimeout(resolve, 5000));
            } catch (error) {
              console.log(\`❌ Failed \${job.platform}: \${error.message}\`);
            }
          }
          
          fs.writeFileSync('crosspost-queue.json', JSON.stringify(queueData, null, 2));
          console.log('🌐 Delayed crossposting completed');
        }
        
        executeDelayed().catch(console.error);
        "
      env:
        MEDIUM_INTEGRATION_TOKEN: ${{ secrets.MEDIUM_INTEGRATION_TOKEN }}
        REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
        REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
        DEVTO_API_KEY: ${{ secrets.DEVTO_API_KEY }}

  # Deploy to hosting platform (GitHub Pages)
  deploy-hosting:
    needs: deploy-blog
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    # Set permissions for GitHub Pages deployment
    permissions:
      contents: read
      pages: write
      id-token: write
    
    # Environment required for GitHub Pages deployment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🔧 Setup Pages
      uses: actions/configure-pages@v4
    
    - name: 📦 Prepare deployment files
      run: |
        echo "📦 Preparing files for deployment..."
        # Create a clean directory for deployment
        mkdir -p _site
        # Copy HTML files and assets
        cp index.html _site/ 2>/dev/null || echo "No main index.html found"
        cp -r en _site/ 2>/dev/null || echo "No en folder found"
        cp -r it _site/ 2>/dev/null || echo "No it folder found"
        cp -r de _site/ 2>/dev/null || echo "No de folder found"
        cp -r assets _site/ 2>/dev/null || echo "No assets folder found"
        cp -r css _site/ 2>/dev/null || echo "No css folder found"
        cp -r js _site/ 2>/dev/null || echo "No js folder found"
        cp -r images _site/ 2>/dev/null || echo "No images folder found"
        
        echo "📋 Files prepared for deployment:"
        ls -la _site/
    
    - name: 📤 Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: _site
    
    - name: 🌐 Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
    
    - name: 📝 Update deployment status
      run: |
        echo "🌐 Website deployed successfully!"
        echo "📅 Deployment time: $(date)"
        echo "🔗 Live URL: https://blog.tanzitech.com"
        echo "🎉 Your blog is now live at blog.tanzitech.com!"
        echo "🏠 Main site: https://tanzitech.com (unchanged)"
        echo "📝 Blog: https://blog.tanzitech.com (new automated blog)"
        echo "🔗 GitHub: https://github.com/gabrieletanzi/social_media_agent"
        echo "✍️ Medium: https://medium.com/@TanziTech"
        echo "💼 LinkedIn: https://linkedin.com/in/tanzi-tech-b2766a293"
        echo "🐦 X/Twitter: https://twitter.com/tanzi_tech"
        echo "📷 Instagram: https://instagram.com/tanzi_tech_insights"
